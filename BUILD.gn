executable("add_two_numbers_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/add_two_numbers_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("contains_duplicate_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/contains_duplicate_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("convert_to_title_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/convert_to_title_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("delete_duplicates_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/delete_duplicates_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("delete_duplicates2_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/delete_duplicates2_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("delete_middle_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/delete_middle_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("delete_node_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/delete_node_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("detect_cycle_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/detect_cycle_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("generate_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/generate_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("get_decimal_value_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/get_decimal_value_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("get_intersection_node_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/get_intersection_node_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("get_kth_from_end_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/get_kth_from_end_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("has_cycle_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/has_cycle_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("in_order_traversal_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/in_order_traversal_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("is_palindrome_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/is_palindrome_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("kth_to_last_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/length_of_last_word_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("length_of_last_word_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/length_of_last_word_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("length_of_longest_substring_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/length_of_longest_substring_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("longest_common_prefix_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/longest_common_prefix_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("matrix_reshape_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/matrix_reshape_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("max_area_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/max_area_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("max_profit_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/max_profit_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("max_sub_array_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/max_sub_array_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("merge_k_sorted_lists_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/merge_k_sorted_lists_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("merge_two_lists_unittests") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/merge_two_lists_unittests.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("merge_tests") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/merge_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("middle_node_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/middle_node_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("odd_even_list_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/odd_even_list_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("post_order_traversal_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/post_order_traversal_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("pre_order_traversal_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/pre_order_traversal_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("remove_duplicate_nodes_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/remove_duplicate_nodes_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("remove_elements_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/remove_elements_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("remove_nth_from_end_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/remove_nth_from_end_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("reverse_list_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/reverse_list_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("reverse_print_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/reverse_print_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("reverse_string_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/reverse_string_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("reverse_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/reverse_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("split_list_to_parts_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/split_list_to_parts_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("str_str_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/str_str_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("swap_pairs_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/swap_pairs_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("title_to_number_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/title_to_number_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("two_sum_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/two_sum_unittest.cpp" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("longest_palindrome_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//solutions/longest_palindrome_unittest.cc" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("multi_thread_1114_tests") {
  sources = [ "solutions/multi_thread_1114_tests.cc" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("is_palindrome2_tests") {
  sources = [ "solutions/is_palindrome2_tests.cc" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("is_subsequnce_tests") {
  sources = [ "solutions/is_subsequence_tests.cc" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("majority_element_tests") {
  sources = [ "solutions/majority_element_tests.cc" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("remove_duplicates_tests") {
  sources = [ "solutions/remove_duplicates_tests.cc" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("remove_duplicates2_tests") {
  sources = [ "solutions/remove_duplicates2_tests.cc" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("remove_element_tests") {
  sources = [ "solutions/remove_element_tests.cc" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("add_binary_tests") {
  sources = [ "solutions/add_binary_tests.cc" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("rotate_tests") {
  sources = [ "solutions/rotate_tests.cc" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("is_same_tree_tests") {
  sources = [ "solutions/is_same_tree_tests.cc" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("invert_tree_tests") {
  sources = [ "solutions/invert_tree_tests.cc" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("group_anagrams") {
  sources = [ "solutions/group_anagrams_tests.cc" ]

  deps = [
    "//solutions:solutions_sources",
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

# DP
executable("climb_stairs") {
  include_dirs = [ "//" ]

  sources = [
    "solutions/dp/climb_stairs.cc",
    "solutions/dp/climb_stairs_tests.cc",
  ]

  deps = [
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("fib") {
  include_dirs = [ "//" ]

  sources = [
    "solutions/dp/fib.cc",
    "solutions/dp/fib_tests.cc",
  ]

  deps = [
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("tribonacci") {
  include_dirs = [ "//" ]

  sources = [
    "solutions/dp/tribonacci.cc",
    "solutions/dp/tribonacci_tests.cc",
  ]

  deps = [
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("min_cost_climbing_stairs") {
  include_dirs = [ "//" ]

  sources = [
    "solutions/dp/min_cost_climbing_stairs.cc",
    "solutions/dp/min_cost_climbing_stairs_tests.cc",
  ]

  deps = [
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("rob") {
  include_dirs = [ "//" ]

  sources = [
    "solutions/dp/rob.cc",
    "solutions/dp/rob_tests.cc",
  ]

  deps = [
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("delete_and_earn") {
  include_dirs = [ "//" ]

  sources = [
    "solutions/dp/delete_and_earn.cc",
    "solutions/dp/delete_and_earn_tests.cc",
  ]

  deps = [
    "//testing:gtest",
    "//testing:gtest_main",
  ]

  cflags = [ "-fsanitize=address" ]
  ldflags = [ "-fsanitize=address" ]
}

executable("unique_paths") {
  include_dirs = [ "//" ]

  sources = [
    "solutions/dp/unique_paths.cc",
    "solutions/dp/unique_paths_tests.cc",
  ]

  deps = [
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("min_path_sum") {
  include_dirs = [ "//" ]

  sources = [
    "solutions/dp/min_path_sum.cc",
    "solutions/dp/min_path_sum_tests.cc",
  ]

  deps = [
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("unique_paths_with_obstacles") {
  include_dirs = [ "//" ]

  sources = [
    "solutions/dp/unique_paths_with_obstacles.cc",
    "solutions/dp/unique_paths_with_obstacles_tests.cc",
  ]

  deps = [
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("longest_consecutive") {
  include_dirs = [ "//" ]

  sources = [
    "solutions/hot100/longest_consecutive.cc",
    "solutions/hot100/longest_consecutive_tests.cc",
  ]

  deps = [
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("two_sum") {
  include_dirs = [ "//" ]

  sources = [
    "solutions/hot100/two_sum.cc",
    "solutions/hot100/two_sum_tests.cc",
  ]

  deps = [
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("move_zeroes") {
  include_dirs = [ "//" ]

  sources = [
    "solutions/hot100/move_zeroes.cc",
    "solutions/hot100/move_zeroes_tests.cc",
  ]

  deps = [
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("max_area") {
  include_dirs = [ "//" ]

  sources = [
    "solutions/hot100/max_area.cc",
    "solutions/hot100/max_area_tests.cc",
  ]

  deps = [
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}

executable("is_unique") {
  include_dirs = [ "//" ]

  sources = [
    "solutions/cci/is_unique.cc",
    "solutions/cci/is_unique_tests.cc",
  ]

  deps = [
    "//testing:gtest",
    "//testing:gtest_main",
  ]
}


#=============================================================================#

executable("sort_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//test/algorithms/sort_test.cc" ]

  deps = [
    "//algorithms:algorithms",
    "//testing:gtest",
    "//testing:gtest_main",
  ]

  cflags = [ "-fsanitize=address" ]
  ldflags = [ "-fsanitize=address" ]
}

executable("bag_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//test/algorithms/bag_unittest.cc" ]

  deps = [
    "//algorithms:algorithms",
    "//testing:gtest",
    "//testing:gtest_main",
  ]

  cflags = [ "-fsanitize=address" ]
  ldflags = [ "-fsanitize=address" ]
}

executable("dynamic_array_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//test/algorithms/dynamic_array_unittest.cc" ]

  deps = [
    "//algorithms:algorithms",
    "//testing:gtest",
    "//testing:gtest_main",
  ]

  cflags = [ "-fsanitize=address" ]
  ldflags = [ "-fsanitize=address" ]
}

executable("queue_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//test/algorithms/queue_unittest.cc" ]

  deps = [
    "//algorithms:algorithms",
    "//testing:gtest",
    "//testing:gtest_main",
  ]

  cflags = [ "-fsanitize=address" ]
  ldflags = [ "-fsanitize=address" ]
}

executable("array_list_unittest") {
  include_dirs = [ "//" ]

  sources = [ "//test/algorithms/array_list_unittest.cc" ]

  deps = [
    "//algorithms:algorithms",
    "//base:base",
    "//testing:gtest",
    "//testing:gtest_main",
  ]

  cflags = [ "-fsanitize=address" ]
  ldflags = [ "-fsanitize=address" ]
}

executable("stack_tests") {
  include_dirs = [ "//" ]

  sources = [ "//test/base/stack_tests.cc" ]

  deps = [
    "//algorithms:algorithms",
    "//base:base",
    "//testing:gtest",
    "//testing:gtest_main",
  ]

  libs = [ "glog" ]

  cflags = [ "-fsanitize=address" ]
  ldflags = [ "-fsanitize=address" ]
}

executable("stack2_tests") {
  include_dirs = [ "//" ]

  sources = [ "//test/base/stack2_tests.cc" ]

  deps = [
    "//algorithms:algorithms",
    "//base:base",
    "//testing:gtest",
    "//testing:gtest_main",
  ]

  libs = [ "glog" ]

  cflags = [ "-fsanitize=address" ]
  ldflags = [ "-fsanitize=address" ]
}

executable("linked_list_tests") {
  include_dirs = [ "//" ]

  sources = [ "//test/base/linked_list_tests.cc" ]

  deps = [
    "//algorithms:algorithms",
    "//base:base",
    "//testing:gtest",
    "//testing:gtest_main",
  ]

  libs = [ "glog" ]

  cflags = [ "-fsanitize=address" ]
  ldflags = [ "-fsanitize=address" ]
}
